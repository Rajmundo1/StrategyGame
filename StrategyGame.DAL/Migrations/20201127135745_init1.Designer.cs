// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StrategyGame.DAL;

namespace StrategyGame.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201127135745_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Attack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttackerId");

                    b.HasIndex("DefenderId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Buildings.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingSpecificsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingSpecificsId");

                    b.HasIndex("CountyId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3cf5dd1-478a-4ea2-a049-6bbb7f965863"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("06ebbbb8-7154-4419-aea5-46d327594517"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5b24eb70-9a6e-40de-b620-96f6dca50fab"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("50c2da0b-43a4-42ae-97ab-c89009f7dd8d"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("219bd5e9-e20e-4393-adb3-b40d97eb276e"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("042767db-2f76-4fdd-99b7-fa0b3054ba3a"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            Level = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("326740fa-a052-4b34-9038-b825d9d3d5cb"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("9dbb0a30-8b47-4843-9c03-06e7b4c501cf"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("ac2dbc91-0163-4064-a6a9-a13afaad7ced"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("cff226fd-aa32-4942-a489-0d0dcb82cbae"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("1bda65c2-81c2-40cd-abd4-a022ef6ae658"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("76698e37-4e57-4405-895d-39812a0000b9"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("fbcc61c5-8886-4703-ae57-8406be7c0713"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e52bd2ac-c58e-4277-a622-545c257fd1d9"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("61156095-4f2f-4d44-8fc4-e15b278557a2"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cd118d28-dc24-44ca-97c7-af2c6f53aa58"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("37819138-f604-42bb-9b7d-90f954da0ce2"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b1a4a941-00d1-4655-b96f-3fcd6ccff69c"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            Level = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8a6390d8-abbe-4f41-ba33-ffbae69bb183"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("9be0efdd-f662-4c7e-8ae3-6cb576f3ea9e"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("2f7b1592-f75f-461b-a497-6344b64737a4"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("19d2606c-9e43-45a8-8631-2dfa58361822"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("bab4441b-58f3-450d-869b-17a89b990ffa"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            Level = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("0a4b02fa-ea0a-469a-8695-7c3ff01534dd"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            Level = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Buildings.BuildingLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingSpecificsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ForceLimitBonus")
                        .HasColumnType("int");

                    b.Property<int>("GoldCost")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MarbleCost")
                        .HasColumnType("int");

                    b.Property<int>("MarbleProduction")
                        .HasColumnType("int");

                    b.Property<int>("PopulationBonus")
                        .HasColumnType("int");

                    b.Property<int>("ResearchOutPut")
                        .HasColumnType("int");

                    b.Property<int>("SulfurCost")
                        .HasColumnType("int");

                    b.Property<int>("SulfurProduction")
                        .HasColumnType("int");

                    b.Property<int>("WineCost")
                        .HasColumnType("int");

                    b.Property<int>("WineProduction")
                        .HasColumnType("int");

                    b.Property<int>("WoodCost")
                        .HasColumnType("int");

                    b.Property<int>("WoodProduction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingSpecificsId");

                    b.ToTable("BuildingLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1221e4f-d781-405b-9944-9e18fc765fe8"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 250,
                            WoodProduction = 100
                        },
                        new
                        {
                            Id = new Guid("73b692f5-591e-42a5-9f6f-d5b382cc5ccd"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 2,
                            MarbleCost = 2,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 15,
                            WoodProduction = 500
                        },
                        new
                        {
                            Id = new Guid("770206ed-5f86-4ea9-a6cc-8b0a1083aa9b"),
                            BuildingSpecificsId = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 3,
                            MarbleCost = 15,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 10,
                            WoodProduction = 1000
                        },
                        new
                        {
                            Id = new Guid("16da0e13-b4dd-4221-a755-5746605f9331"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleProduction = 100,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 250,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("e8268211-0c57-49c3-b88d-821876b372a5"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 2,
                            MarbleCost = 200,
                            MarbleProduction = 500,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 1500,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("b7bc3554-98d4-419c-a656-74b81cd33dfa"),
                            BuildingSpecificsId = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 3,
                            MarbleCost = 1500,
                            MarbleProduction = 1000,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 10000,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("f747608e-aafb-49c8-8912-e2e23ed98e3f"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 100,
                            WoodCost = 250,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("a80feb0d-0e00-42ba-9b34-731376693a6b"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 2,
                            MarbleCost = 200,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 500,
                            WoodCost = 1500,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("5d9746c5-bc3d-4164-850a-4778a6652c6e"),
                            BuildingSpecificsId = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 3,
                            MarbleCost = 1500,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 0,
                            WineProduction = 1000,
                            WoodCost = 10000,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("7906db1c-8193-4e27-aa30-8a30e5426eea"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 100,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 250,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("95805848-ee97-4496-8cb7-9cdaa55af49a"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 2,
                            MarbleCost = 200,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 500,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 1500,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("6bb9b1c6-b0ca-4a61-9b99-4efc86f92558"),
                            BuildingSpecificsId = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 3,
                            MarbleCost = 1500,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 1000,
                            WineCost = 0,
                            WineProduction = 0,
                            WoodCost = 10000,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("34cdbb37-be23-4867-b1f9-4e3bdcec10d9"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 100,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 100,
                            WineProduction = 0,
                            WoodCost = 250,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("59cd37b0-dc91-432f-9e1f-cc54547eb807"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 2,
                            MarbleCost = 200,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 500,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 800,
                            WineProduction = 0,
                            WoodCost = 1500,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("b0c9c409-5a66-4e7d-9eb5-17b5ce5ced17"),
                            BuildingSpecificsId = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            ForceLimitBonus = 0,
                            GoldCost = 0,
                            Level = 3,
                            MarbleCost = 1500,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 1000,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 2500,
                            WineProduction = 0,
                            WoodCost = 10000,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("547ad002-b237-474e-b68c-0018ddf4b77a"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            ForceLimitBonus = 100,
                            GoldCost = 0,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 100,
                            WineProduction = 0,
                            WoodCost = 250,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("205d6189-4fef-4777-afb8-9f73a835724e"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            ForceLimitBonus = 500,
                            GoldCost = 0,
                            Level = 2,
                            MarbleCost = 200,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 0,
                            SulfurProduction = 0,
                            WineCost = 800,
                            WineProduction = 0,
                            WoodCost = 1500,
                            WoodProduction = 0
                        },
                        new
                        {
                            Id = new Guid("00f807d6-9017-4f80-80ab-8544d9343f72"),
                            BuildingSpecificsId = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            ForceLimitBonus = 1000,
                            GoldCost = 0,
                            Level = 3,
                            MarbleCost = 1500,
                            MarbleProduction = 0,
                            PopulationBonus = 0,
                            ResearchOutPut = 0,
                            SulfurCost = 2000,
                            SulfurProduction = 0,
                            WineCost = 2500,
                            WineProduction = 0,
                            WoodCost = 10000,
                            WoodProduction = 0
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Buildings.BuildingSpecifics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BuildingSpecifics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2bfc4a7-d73f-4a2e-b91f-209c08a3f14f"),
                            Description = "A sawmill that produces wood",
                            ImageUrl = "/images/sawmill",
                            MaxLevel = 3,
                            Name = "Sawmill"
                        },
                        new
                        {
                            Id = new Guid("1d203260-0928-47b6-9d10-5e4cf0c70265"),
                            Description = "A marble quarry that produces marble",
                            ImageUrl = "/images/quarry",
                            MaxLevel = 3,
                            Name = "Quarry"
                        },
                        new
                        {
                            Id = new Guid("4db1c8d2-b2b0-49a9-b8a5-8f9d5bbecddb"),
                            Description = "A winery that produces wine",
                            ImageUrl = "/images/winery",
                            MaxLevel = 3,
                            Name = "Winery"
                        },
                        new
                        {
                            Id = new Guid("d02e3c9c-f26c-4136-a904-27ad074fa456"),
                            Description = "A sulfur mine that produces sulfur",
                            ImageUrl = "/images/sulfurMine",
                            MaxLevel = 3,
                            Name = "Sulfur Mine"
                        },
                        new
                        {
                            Id = new Guid("598fd678-5915-4c88-80d8-ff389c8278f9"),
                            Description = "An academy that produces research points",
                            ImageUrl = "/images/academy",
                            MaxLevel = 3,
                            Name = "Academy"
                        },
                        new
                        {
                            Id = new Guid("3a8ffb5d-6edb-4908-a72e-3d268128efee"),
                            Description = "A garrison that accomodate units",
                            ImageUrl = "/images/garrison",
                            MaxLevel = 3,
                            Name = "Garrison"
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.County", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasePopulation")
                        .HasColumnType("int");

                    b.Property<Guid>("KingdomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Marble")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sulfur")
                        .HasColumnType("int");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.Property<int>("Wine")
                        .HasColumnType("int");

                    b.Property<int>("WineConsumption")
                        .HasColumnType("int");

                    b.Property<int>("Wood")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KingdomId");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2"),
                            BasePopulation = 200,
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Marble = 5000,
                            Name = "Kingdom1 County1",
                            Sulfur = 1000,
                            TaxRate = 1.0,
                            Wine = 2000,
                            WineConsumption = 0,
                            Wood = 5000
                        },
                        new
                        {
                            Id = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368"),
                            BasePopulation = 200,
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Marble = 5000,
                            Name = "Kingdom1 County2",
                            Sulfur = 1000,
                            TaxRate = 1.0,
                            Wine = 2000,
                            WineConsumption = 0,
                            Wood = 5000
                        },
                        new
                        {
                            Id = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6"),
                            BasePopulation = 200,
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Marble = 5000,
                            Name = "Kingdom2 County1",
                            Sulfur = 1000,
                            TaxRate = 1.0,
                            Wine = 2000,
                            WineConsumption = 0,
                            Wood = 5000
                        },
                        new
                        {
                            Id = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2"),
                            BasePopulation = 200,
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Marble = 5000,
                            Name = "Kingdom2 County2",
                            Sulfur = 1000,
                            TaxRate = 1.0,
                            Wine = 2000,
                            WineConsumption = 0,
                            Wood = 5000
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bb1f3c1-8c10-439c-8dcb-7f8cc1f8044e"),
                            Round = 0
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Kingdom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("ResearchPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Kingdoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Gold = 3000,
                            ResearchPoint = 2000
                        },
                        new
                        {
                            Id = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Gold = 3000,
                            ResearchPoint = 2000
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Technologies.Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KingdomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TechnologySpecificsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KingdomId");

                    b.HasIndex("TechnologySpecificsId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bfc558f-e32b-463e-9e74-06696bd7877a"),
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Status = 1,
                            TechnologySpecificsId = new Guid("a6336474-fa17-43ba-a5c6-7fee92ab15b7")
                        },
                        new
                        {
                            Id = new Guid("fb6408b3-d806-43f1-9ee4-ffefc885e9ce"),
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Status = 1,
                            TechnologySpecificsId = new Guid("f7f7f6a9-1ce5-4051-82b0-a55fb19d901c")
                        },
                        new
                        {
                            Id = new Guid("3444c5c0-db00-49fa-a0be-676e4d05864a"),
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Status = 1,
                            TechnologySpecificsId = new Guid("93ad7e45-7071-48d5-a5df-c5eb21bb35da")
                        },
                        new
                        {
                            Id = new Guid("fce4e719-9a94-4a29-b9da-3ab5b87a910e"),
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            Status = 1,
                            TechnologySpecificsId = new Guid("4e9f32b6-2621-4f7c-a939-f4d1a1a2daae")
                        },
                        new
                        {
                            Id = new Guid("0d5fa209-cd89-4f26-bf6c-2f915a661226"),
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Status = 2,
                            TechnologySpecificsId = new Guid("a6336474-fa17-43ba-a5c6-7fee92ab15b7")
                        },
                        new
                        {
                            Id = new Guid("67648201-cb7a-4904-8622-b2863444eb82"),
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Status = 2,
                            TechnologySpecificsId = new Guid("f7f7f6a9-1ce5-4051-82b0-a55fb19d901c")
                        },
                        new
                        {
                            Id = new Guid("605b6d6a-40dd-415d-8726-46ef8c0592bf"),
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Status = 2,
                            TechnologySpecificsId = new Guid("93ad7e45-7071-48d5-a5df-c5eb21bb35da")
                        },
                        new
                        {
                            Id = new Guid("e12a9bfd-1847-4e43-ae91-bcce2c5545a3"),
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            Status = 2,
                            TechnologySpecificsId = new Guid("4e9f32b6-2621-4f7c-a939-f4d1a1a2daae")
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Technologies.TechnologySpecifics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AttackPowerBonus")
                        .HasColumnType("float");

                    b.Property<double>("DefensePowerBonus")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GoldBonus")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ResearchBonus")
                        .HasColumnType("float");

                    b.Property<int>("ResearchPointCost")
                        .HasColumnType("int");

                    b.Property<double>("StoneBonus")
                        .HasColumnType("float");

                    b.Property<double>("SulfurBonus")
                        .HasColumnType("float");

                    b.Property<double>("WineBonus")
                        .HasColumnType("float");

                    b.Property<double>("WoodBonus")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TechnologySpecifics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6336474-fa17-43ba-a5c6-7fee92ab15b7"),
                            AttackPowerBonus = 0.0,
                            DefensePowerBonus = 0.0,
                            Description = "Boosts all production",
                            GoldBonus = 0.0,
                            Name = "Production Booster",
                            PictureUrl = "/images/productionBooster",
                            ResearchBonus = 0.0,
                            ResearchPointCost = 1000,
                            StoneBonus = 1.1000000000000001,
                            SulfurBonus = 1.1000000000000001,
                            WineBonus = 1.1000000000000001,
                            WoodBonus = 1.1000000000000001
                        },
                        new
                        {
                            Id = new Guid("f7f7f6a9-1ce5-4051-82b0-a55fb19d901c"),
                            AttackPowerBonus = 0.0,
                            DefensePowerBonus = 0.0,
                            Description = "Boosts research output",
                            GoldBonus = 0.0,
                            Name = "Science Booster",
                            PictureUrl = "/images/scienceBooster",
                            ResearchBonus = 1.2,
                            ResearchPointCost = 1000,
                            StoneBonus = 0.0,
                            SulfurBonus = 0.0,
                            WineBonus = 0.0,
                            WoodBonus = 0.0
                        },
                        new
                        {
                            Id = new Guid("93ad7e45-7071-48d5-a5df-c5eb21bb35da"),
                            AttackPowerBonus = 0.0,
                            DefensePowerBonus = 0.0,
                            Description = "Boosts gold production",
                            GoldBonus = 1.3,
                            Name = "Gold Production Booster",
                            PictureUrl = "/images/goldProductionBooster",
                            ResearchBonus = 0.0,
                            ResearchPointCost = 1000,
                            StoneBonus = 0.0,
                            SulfurBonus = 0.0,
                            WineBonus = 0.0,
                            WoodBonus = 0.0
                        },
                        new
                        {
                            Id = new Guid("4e9f32b6-2621-4f7c-a939-f4d1a1a2daae"),
                            AttackPowerBonus = 1.1499999999999999,
                            DefensePowerBonus = 1.1000000000000001,
                            Description = "Unit booster research",
                            GoldBonus = 0.0,
                            Name = "Unit Booster",
                            PictureUrl = "/images/unitBooster",
                            ResearchBonus = 0.0,
                            ResearchPointCost = 1000,
                            StoneBonus = 0.0,
                            SulfurBonus = 0.0,
                            WineBonus = 0.0,
                            WoodBonus = 0.0
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid>("UnitGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitSpecificsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitGroupId");

                    b.HasIndex("UnitSpecificsId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d7f181c-8933-483d-af15-d50a0a599c87"),
                            Level = 1,
                            UnitGroupId = new Guid("05926428-3186-4730-85c6-31b740cd9e5d"),
                            UnitSpecificsId = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5")
                        },
                        new
                        {
                            Id = new Guid("6edbded8-6fe4-4f84-b7ac-1a4ea8edce6b"),
                            Level = 3,
                            UnitGroupId = new Guid("05926428-3186-4730-85c6-31b740cd9e5d"),
                            UnitSpecificsId = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5")
                        },
                        new
                        {
                            Id = new Guid("3454f1bd-a857-401d-9da7-c51ba635f198"),
                            Level = 1,
                            UnitGroupId = new Guid("05926428-3186-4730-85c6-31b740cd9e5d"),
                            UnitSpecificsId = new Guid("489e9070-f6f6-4130-8979-89e54b140835")
                        },
                        new
                        {
                            Id = new Guid("2229d5a6-09cb-4e40-93b9-3a2367d3b645"),
                            Level = 2,
                            UnitGroupId = new Guid("05926428-3186-4730-85c6-31b740cd9e5d"),
                            UnitSpecificsId = new Guid("06d69f35-d7f8-444f-bd25-da45bc6accb6")
                        },
                        new
                        {
                            Id = new Guid("5ff8abb8-6cf9-4c16-84fb-b8bd4f6e6741"),
                            Level = 1,
                            UnitGroupId = new Guid("1a4b7681-b373-420d-aaa0-c5ec80e00b16"),
                            UnitSpecificsId = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5")
                        },
                        new
                        {
                            Id = new Guid("abd37410-d250-4e8c-8e5c-256ae2836f36"),
                            Level = 2,
                            UnitGroupId = new Guid("1a4b7681-b373-420d-aaa0-c5ec80e00b16"),
                            UnitSpecificsId = new Guid("489e9070-f6f6-4130-8979-89e54b140835")
                        },
                        new
                        {
                            Id = new Guid("7a904252-9830-45f6-949d-b742c210975b"),
                            Level = 2,
                            UnitGroupId = new Guid("1a4b7681-b373-420d-aaa0-c5ec80e00b16"),
                            UnitSpecificsId = new Guid("489e9070-f6f6-4130-8979-89e54b140835")
                        },
                        new
                        {
                            Id = new Guid("fa09b553-57f6-4f3a-ac29-acaec501d22c"),
                            Level = 3,
                            UnitGroupId = new Guid("1a4b7681-b373-420d-aaa0-c5ec80e00b16"),
                            UnitSpecificsId = new Guid("06d69f35-d7f8-444f-bd25-da45bc6accb6")
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.UnitGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttackId")
                        .IsUnique()
                        .HasFilter("[AttackId] IS NOT NULL");

                    b.HasIndex("CountyId")
                        .IsUnique()
                        .HasFilter("[CountyId] IS NOT NULL");

                    b.ToTable("UnitGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05926428-3186-4730-85c6-31b740cd9e5d"),
                            CountyId = new Guid("217f6d72-a33e-4612-b164-f1bbd5db94c2")
                        },
                        new
                        {
                            Id = new Guid("739dbea4-c91c-4ba2-9ea5-62115d317e46"),
                            CountyId = new Guid("9160fe49-2966-4fb6-94d7-6999c7351368")
                        },
                        new
                        {
                            Id = new Guid("1a4b7681-b373-420d-aaa0-c5ec80e00b16"),
                            CountyId = new Guid("610fb8b0-386e-4b0d-9a51-59403fd686b6")
                        },
                        new
                        {
                            Id = new Guid("b32e83be-34f0-4bed-b225-966887eb13e4"),
                            CountyId = new Guid("01ef4de3-61c4-4671-bcd3-4b5009dea2d2")
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.UnitLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttackPower")
                        .HasColumnType("int");

                    b.Property<int>("DefensePower")
                        .HasColumnType("int");

                    b.Property<int>("ForceLimit")
                        .HasColumnType("int");

                    b.Property<int>("GoldCost")
                        .HasColumnType("int");

                    b.Property<int>("GoldUpkeep")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MarbleCost")
                        .HasColumnType("int");

                    b.Property<int>("MarbleUpkeep")
                        .HasColumnType("int");

                    b.Property<int>("SulfurCost")
                        .HasColumnType("int");

                    b.Property<int>("SulfurUpkeep")
                        .HasColumnType("int");

                    b.Property<Guid>("UnitSpecificsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WineCost")
                        .HasColumnType("int");

                    b.Property<int>("WineUpkeep")
                        .HasColumnType("int");

                    b.Property<int>("WoodCost")
                        .HasColumnType("int");

                    b.Property<int>("WoodUpkeep")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitSpecificsId");

                    b.ToTable("UnitLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e1869eb-f12a-40e7-bec3-0b3ae410370a"),
                            AttackPower = 3,
                            DefensePower = 5,
                            ForceLimit = 1,
                            GoldCost = 10,
                            GoldUpkeep = 5,
                            Level = 1,
                            MarbleCost = 0,
                            MarbleUpkeep = 0,
                            SulfurCost = 0,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 15,
                            WoodUpkeep = 0
                        },
                        new
                        {
                            Id = new Guid("26f967a9-44b9-4aa9-88ae-b3af7ac0ad09"),
                            AttackPower = 5,
                            DefensePower = 8,
                            ForceLimit = 2,
                            GoldCost = 15,
                            GoldUpkeep = 10,
                            Level = 2,
                            MarbleCost = 5,
                            MarbleUpkeep = 0,
                            SulfurCost = 0,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 25,
                            WoodUpkeep = 0
                        },
                        new
                        {
                            Id = new Guid("15ec08c3-a2e0-42a9-bd5a-37381e121dcb"),
                            AttackPower = 8,
                            DefensePower = 12,
                            ForceLimit = 3,
                            GoldCost = 30,
                            GoldUpkeep = 15,
                            Level = 3,
                            MarbleCost = 50,
                            MarbleUpkeep = 0,
                            SulfurCost = 0,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 50,
                            WoodUpkeep = 0
                        },
                        new
                        {
                            Id = new Guid("2e560b5e-f626-4b25-8957-0337f385c2be"),
                            AttackPower = 7,
                            DefensePower = 2,
                            ForceLimit = 2,
                            GoldCost = 10,
                            GoldUpkeep = 5,
                            Level = 1,
                            MarbleCost = 10,
                            MarbleUpkeep = 5,
                            SulfurCost = 0,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("489e9070-f6f6-4130-8979-89e54b140835"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 15,
                            WoodUpkeep = 0
                        },
                        new
                        {
                            Id = new Guid("2c944d6f-a2ea-448a-a4f8-7756ef115263"),
                            AttackPower = 10,
                            DefensePower = 4,
                            ForceLimit = 3,
                            GoldCost = 20,
                            GoldUpkeep = 10,
                            Level = 2,
                            MarbleCost = 15,
                            MarbleUpkeep = 10,
                            SulfurCost = 0,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("489e9070-f6f6-4130-8979-89e54b140835"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 30,
                            WoodUpkeep = 0
                        },
                        new
                        {
                            Id = new Guid("b0563dec-ae9a-49df-bbc2-4db74bf5e2ec"),
                            AttackPower = 15,
                            DefensePower = 6,
                            ForceLimit = 4,
                            GoldCost = 35,
                            GoldUpkeep = 20,
                            Level = 3,
                            MarbleCost = 20,
                            MarbleUpkeep = 15,
                            SulfurCost = 0,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("489e9070-f6f6-4130-8979-89e54b140835"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 50,
                            WoodUpkeep = 0
                        },
                        new
                        {
                            Id = new Guid("e8cfbc91-d0c7-4ee4-a123-ce3e554026f8"),
                            AttackPower = 10,
                            DefensePower = 10,
                            ForceLimit = 5,
                            GoldCost = 100,
                            GoldUpkeep = 20,
                            Level = 1,
                            MarbleCost = 50,
                            MarbleUpkeep = 20,
                            SulfurCost = 50,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("06d69f35-d7f8-444f-bd25-da45bc6accb6"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 100,
                            WoodUpkeep = 50
                        },
                        new
                        {
                            Id = new Guid("cc847345-0747-45ee-ab9b-60a97873d9b1"),
                            AttackPower = 20,
                            DefensePower = 20,
                            ForceLimit = 10,
                            GoldCost = 200,
                            GoldUpkeep = 50,
                            Level = 2,
                            MarbleCost = 100,
                            MarbleUpkeep = 40,
                            SulfurCost = 100,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("06d69f35-d7f8-444f-bd25-da45bc6accb6"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 200,
                            WoodUpkeep = 100
                        },
                        new
                        {
                            Id = new Guid("9946dd5f-078a-4029-9ba1-0a3b22d8dfdc"),
                            AttackPower = 30,
                            DefensePower = 30,
                            ForceLimit = 15,
                            GoldCost = 400,
                            GoldUpkeep = 100,
                            Level = 3,
                            MarbleCost = 200,
                            MarbleUpkeep = 80,
                            SulfurCost = 200,
                            SulfurUpkeep = 0,
                            UnitSpecificsId = new Guid("06d69f35-d7f8-444f-bd25-da45bc6accb6"),
                            WineCost = 0,
                            WineUpkeep = 0,
                            WoodCost = 400,
                            WoodUpkeep = 200
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.UnitSpecifics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitSpecifics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97f6314a-766d-4aa2-9c49-7dbcf86140b5"),
                            Description = "A melee unit that is strong in close combat",
                            ImageUrl = "/images/hoplite",
                            MaxLevel = 3,
                            Name = "Hoplite"
                        },
                        new
                        {
                            Id = new Guid("489e9070-f6f6-4130-8979-89e54b140835"),
                            Description = "A ranged unit that is strong in ranged combat",
                            ImageUrl = "/images/slingshot",
                            MaxLevel = 3,
                            Name = "Slingshot"
                        },
                        new
                        {
                            Id = new Guid("06d69f35-d7f8-444f-bd25-da45bc6accb6"),
                            Description = "A ranged unit that is the strongest in ranged combat",
                            ImageUrl = "/images/catapult",
                            MaxLevel = 3,
                            Name = "Catapult"
                        });
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KingdomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ScoreboardPlace")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("KingdomId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ff5e4b7f-c83d-4070-a91a-a33de1b19405",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c435853-ed91-45f9-b1b5-05843bd257f6",
                            EmailConfirmed = false,
                            GameId = new Guid("1bb1f3c1-8c10-439c-8dcb-7f8cc1f8044e"),
                            KingdomId = new Guid("5fd3e0a3-0e0e-445a-93e6-8f94b6690794"),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJnSl+KnCis00zUTYzHMHm8H2xS0u/gNvs2iSMzIXTcHcnkLDoBPJXciG2FjUR9mBw==",
                            PhoneNumberConfirmed = false,
                            ScoreboardPlace = 1,
                            SecurityStamp = "f6065086-f74f-4c02-bf4c-0a72b055ad23",
                            TwoFactorEnabled = false,
                            UserName = "Rajmundo1"
                        },
                        new
                        {
                            Id = "b63d4aee-70d2-4d84-93a6-56c9db32aa11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64211e6c-60d6-429f-9c02-0773a5b9c47b",
                            EmailConfirmed = false,
                            GameId = new Guid("1bb1f3c1-8c10-439c-8dcb-7f8cc1f8044e"),
                            KingdomId = new Guid("a37de913-486d-4df3-9025-1e5d4f881220"),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDq1VncbeaiIYLMgV9Q6OAPWPlpHN+0F+3DZPlzKRd3L6mdR3IxG+Eg3rm9PPIlzRw==",
                            PhoneNumberConfirmed = false,
                            ScoreboardPlace = 2,
                            SecurityStamp = "771e0bfb-98d1-4020-9f2d-902f792759ef",
                            TwoFactorEnabled = false,
                            UserName = "TestUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StrategyGame.MODEL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Attack", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.County", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StrategyGame.MODEL.Entities.County", "Defender")
                        .WithMany()
                        .HasForeignKey("DefenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Buildings.Building", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Buildings.BuildingSpecifics", "BuildingSpecifics")
                        .WithMany()
                        .HasForeignKey("BuildingSpecificsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StrategyGame.MODEL.Entities.County", null)
                        .WithMany("Buildings")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Buildings.BuildingLevel", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Buildings.BuildingSpecifics", null)
                        .WithMany("BuildingLevels")
                        .HasForeignKey("BuildingSpecificsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.County", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Kingdom", "Kingdom")
                        .WithMany("Counties")
                        .HasForeignKey("KingdomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Technologies.Technology", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Kingdom", null)
                        .WithMany("Technologies")
                        .HasForeignKey("KingdomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StrategyGame.MODEL.Entities.Technologies.TechnologySpecifics", "Specifics")
                        .WithMany()
                        .HasForeignKey("TechnologySpecificsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.Unit", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Units.UnitGroup", null)
                        .WithMany("Units")
                        .HasForeignKey("UnitGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StrategyGame.MODEL.Entities.Units.UnitSpecifics", "UnitSpecifics")
                        .WithMany()
                        .HasForeignKey("UnitSpecificsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.UnitGroup", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Attack", null)
                        .WithOne("AttackerUnits")
                        .HasForeignKey("StrategyGame.MODEL.Entities.Units.UnitGroup", "AttackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StrategyGame.MODEL.Entities.County", null)
                        .WithOne("Units")
                        .HasForeignKey("StrategyGame.MODEL.Entities.Units.UnitGroup", "CountyId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.Units.UnitLevel", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Units.UnitSpecifics", null)
                        .WithMany("UnitLevels")
                        .HasForeignKey("UnitSpecificsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.MODEL.Entities.User", b =>
                {
                    b.HasOne("StrategyGame.MODEL.Entities.Game", null)
                        .WithMany("Users")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StrategyGame.MODEL.Entities.Kingdom", "Kingdom")
                        .WithMany()
                        .HasForeignKey("KingdomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
